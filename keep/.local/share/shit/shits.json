{
  "aws-cli": {
    "dynamodb: get an item": "aws dynamodb get-item --table-name=$(aws dynamodb list-tables | jq \".TableNames[]\" | tr -d \\\" | fzf) --key='{ \"path\": { \"S\": \"/hello\" } }'",
    "logs: get events by log group": "aws logs tail $(aws logs describe-log-groups | jq \".logGroups[].logGroupName\" | tr -d \\\" | fzf) --follow --format short",
    "s3: remove a bucket (force)": "aws s3 rb s3://$(aws s3 ls | awk '{print $3\" \"$1\" \"$2}' | fzf | awk '{print $1}') --force",
    "s3: download something": "aws s3api get-object --bucket <bucket_name> --key <path_to_file> <local_name_of_file>",
    "route53: check domain available": "aws route53domains check-domain-availability --domain-name ncko.me",
    "route53: get domain suggestions": "aws route53domains get-domain-suggestions \\\n\t--suggestion-count 10 \\\n\t--only-available \\\n\t--domain-name ncko.com"
  },
  "tmux": {
    "sessions: kill session by name": "tmux kill-session -t $(tmux list-sessions | awk '{print $1}' | tr -d : | fzf)"
  },
  "gh": {
    "repo: create a private repo from current directory": "gh repo create <project_name> --private --source=. --remote=upstream",
    "gist: create private gist": "gh gist create -d \"<description>\" <file> | pbcopy",
    "pr: checkout selected pr branch": "git checkout $(gh pr list --json author --json headRefName --json title --json updatedAt --jq '.[] | \"\\(.updatedAt) \\(.author.login) \\(.headRefName) -- \\(.title)\"' | fzf --layout=reverse-list | awk '{print $3}')",
    "pr: view prs for current repo": "gh pr view $(gh pr list --author ncko | fzf | awk '{print $1}')"
  },
  "bash": {
    "_default values": "val=${1:-$default_val}",
    "set bold text": "bold=$(tput bold)\nnormal=$(tput sgr0)\necho \"${bold}bold text${normal} normal text\"",
    "get current script's path": "script_path=`dirname -- \"\\`readlink -f -- \"$0\";\\`\"`",
    "get exit code": "$? # holds the exit code of the previous command (https://madflojo.medium.com/understanding-exit-codes-in-bash-6942a8b96ce5)",
    "get absolute path from relative": "realpath ~/.dotfiles",
    "get random string": "echo $RANDOM | md5sum | head -c 20; echo;",
    "get random string 2": "echo $RANDOM | base64 | head -c 20; echo;",
    "get random string 3": "openssl rand -hex 20 # or openssl rand -base64 20",
    "getopts": "while getopts \"d:n:h\" option\n  do\n    case \"${option}\" in\n      d) somecommand \"${OPTARG}\";;\n      n)\n        somevar=\"${OPTARG}\"\n        othercommand $somevar\n        ;;\n      h) helpcommand && exit;;\n    esac\n  done\n\nhelp && exit 1",
    "display project structure": "tree -d -L 2 -h | less",
    "generate a password": "LC_ALL=C tr -dc A-Za-z0-9 < /dev/urandom | head -c 16; echo",
    "recursively search files in a directory for a string": "grep -rnw '/path/to/somewhere/' -e 'pattern'"
  },
  "jq": {
    "concat strings": "cat whatever.json | jq '.[] | \"\\(.path.to.thing) \\(.anotherpath)\"'"
  },
  "cf": {
    "tdd single method": "tdd --filter methodName path/to/file.php"
  },
  "git": {
    "update submodule": "git submodule update --remote",
    "list contributors": "git shortlog -sne --all"
  },
  "networking": {
    "ip of domain name": "nslookup ncko.me",
    "the domain of an ip address": "host <ip>",
    "arp entries": "arp -a",
    "ip to mac address": "ping -c 1 <ip> && arp -a"
  },
  "homelab": {
    "restart openvpn": "sudo openvpn --config <config> --daemon"
  },
  "docker": {
    "rm container": "docker container rm $(docker container ls -a --format '{{.Names}} {{.Image}} {{.Status}} {{.ID}}' | column -t | fzf --reverse | awk '{print $NF}')"
  }
}
